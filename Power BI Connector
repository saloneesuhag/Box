// This file contains your Data Connector logic
section Boxtry;


    client_id = "";
    client_secret = "";
    redirect_uri = "https://oauth.powerbi.com/views/oauthredirect.html";
    token_uri = "https://api.box.com/oauth2/token";
    authorize_uri = "https://xxx.account.box.com/api/oauth2/authorize";
    logout_uri = "https://xxx.account.box.com/logout";



windowWidth = 720;
windowHeight = 1024;

scope_prefix = "";
scopes = {
    "Data.Alter_Any"
};


[DataSource.Kind="Boxtry", Publish="Boxtry.Publish"]
shared Boxtry.Contents = (url as text) =>
    let
        source = Json.Document(Web.Contents(url))
    in
        source;

// Data Source Kind description
Boxtry = [
   TestConnection = (dataSourcePath) => { "Boxtry.Contents", dataSourcePath },
   Authentication = [
     OAuth = [
      StartLogin = StartLogin,
      FinishLogin = FinishLogin
      
      ]
     ],
        Label = Extension.LoadString("DataSourceLabel")
];

// Data Source UI publishing description
Boxtry.Publish = [
    Beta = true,
   
    ButtonText = { Extension.LoadString("ButtonTitle"), Extension.LoadString("ButtonHelp") },
    
    SourceImage = Boxtry.Icons,
    SourceTypeImage = Boxtry.Icons
];


StartLogin = (resourceUrl, state, display) =>
        let
        authorizeUrl = authorize_uri & "?" & Uri.BuildQueryString([
            response_type = "code",
            client_id = client_id,  
            redirect_uri = redirect_uri,
            state = state,
            scope = GetScopeString(scopes, scope_prefix)
        ])
    in
        [
            LoginUri = authorizeUrl,
            CallbackUri = redirect_uri,
            WindowHeight = 720,
            WindowWidth = 1024,
            Context = null
        ];
FinishLogin = (context, callbackUri, state) =>
    let
        // parse the full callbackUri, and extract the Query string
        parts = Uri.Parts(callbackUri)[Query],
        // if the query string contains an "error" field, raise an error
        // otherwise call TokenMethod to exchange our code for an access_token
        result = if (Record.HasFields(parts, {"error", "error_description"})) then 
                    error Error.Record(parts[error], parts[error_description], parts)
                 else
                    TokenMethod("authorization_code", "code", parts[code])
    in
        result;

TokenMethod = (grantType, tokenField, code) =>
    let
        queryString = [
            grant_type = "authorization_code",
            redirect_uri = redirect_uri,
            client_id = client_id,
            scope = GetScopeString(scopes, scope_prefix)
        ],
        queryWithCode = Record.AddField(queryString, tokenField, code),

        tokenResponse = Web.Contents(token_uri, [
            Content = Text.ToBinary(Uri.BuildQueryString(queryWithCode)),
            Headers = [
                #"Content-type" = "application/x-www-form-urlencoded",
                #"Accept" = "application/json"
            ],
            ManualStatusHandling = {400} 
        ]),
        body = Json.Document(tokenResponse),
        result = if (Record.HasFields(body, {"error", "error_description"})) then 
                    error Error.Record(body[error], body[error_description], body)
                 else
                    body
    in
        result;

Value.IfNull = (a, b) => if a <> null then a else b;

GetScopeString = (scopes as list, optional scopePrefix as text) as text =>
    let
        prefix = Value.IfNull(scopePrefix, ""),
        addPrefix = List.Transform(scopes, each prefix & _),
        asText = Text.Combine(addPrefix, " ")
    in
        asText;
        

        


Boxtry.Icons = [
    Icon16 = { Extension.Contents("Boxtry16.png"), Extension.Contents("Boxtry20.png"), Extension.Contents("Boxtry24.png"), Extension.Contents("Boxtry32.png") },
    Icon32 = { Extension.Contents("Boxtry32.png"), Extension.Contents("Boxtry40.png"), Extension.Contents("Boxtry48.png"), Extension.Contents("Boxtry64.png") }
];
